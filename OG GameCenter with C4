#include <iostream>
#include <sstream>
#include <string>
#include <cstdlib>
#include <cmath>
#include <stack>
//include three game headers
using namespace std;
bool quit = false;

class ConnectFour{
	private:
		int board[6][7];
		int level;
		stack<int> plays;
		bool continueGame;
		int getHeight(int x);
		bool checkRow(int token);
		bool checkColumn(int token);
		bool checkPos(int token);
		bool checkNeg(int token);
		void removeLast(int times);
		bool firstMove();
		//bool changeDifficulty();
		bool information();
		bool guide();
		bool ask();
		//int askLevel();
		void reset();
		bool humanMove();
		bool checkWinner(int token);
		bool checkFull();
		void printBoard();
		void computerMove();
		void turns();
		bool canMove(int x);
		bool ask(string s);
		int checkUpSolutions(int token, int x);
		int checkSideSolutions(int token, int xStart);
		int checkPosSolutions(int token, int xStart);
		int checkNegSolutions(int token, int xStart);
		int* checkSolutions(int token);
		int weighted(int);
		int moves;
		void exit();
		
	public:
		ConnectFour(int x) {
			level = x;
			moves = 0;
			continueGame = true;
			cout << "Here\n";
			while(continueGame) {
				reset();
				turns();
			}
				
		}
		~ConnectFour() {};
		bool getToken(int x, int y);
		void setToken(int x, int human);
		void removeToken(int x);
		int getTopToken(int x);
};


void ConnectFour::turns() {
	int first = firstMove() ? 1:2;
	bool playing = true;
	bool win = false;
	int token;
	printBoard();
	string input;
	do {
		moves++;
		token = (plays.size()+first)%2 == 1 ? 1:-1;
		cout << "token: " << token << endl;
		if(token == 1) {
			playing = humanMove();
		}
		else {
			computerMove();
			printBoard();
		}
		win = checkWinner(token);
		if(win && token == 1) {
			cout << "Congratulations human. You have defeated the computer\n";
			cout << "Would you like to exit? Enter E if so ... Else enter N : "
				 << "\n";
			cin >> input;
			while(cin.fail()){
				std::cin.clear();
				std::cin.ignore();
				std::cout << "\nInvalid input, please enter E or N .. : \n";
				std::cin >> input;
			}
			if(input == "E"){
				playing = false;
			}
			else{
				cout << "Continuing...\n";
			}
		}
		else if(win && token == -1) {
			cout << "Unfortunately, the computer has won\n";
			cout << "Would you like to exit? Enter E if so ... Else enter N : "
				 << "\n";
			cin >> input;
			while(cin.fail()){
				std::cin.clear();
				std::cin.ignore();
				std::cout << "\nInvalid input, please enter E or N .. : \n";
				std::cin >> input;
			}
			if(input == "E"){
				playing = false;
			}
			else{
				cout << "Continuing...\n";
			}
		}

	} while(!win && !checkFull() && playing);
	continueGame = false;
	return;
}

bool ConnectFour::firstMove() {
	string input;
	cout << "Do you want to make the first move (Y/N)? ";
	cin >> input;
	bool valid = false;
	while(!valid) {
		if(input == "Y") {
			valid = true;
			return true;
		}
		else if(input == "N") {
			valid = true;
			return false;
		}		
		else {
			valid = false;
			cout << "This is not a valid input. Try again\n";
			cout << "Do you want to make the first move (Y/N)? ";
			cin >> input;
		}
	}	
}

bool ConnectFour::humanMove() {
	string input;
	bool valid = false;
	
	cout << "Where do you want to place your token (1-7)?";
	cin >> input;
			
	while(!valid) {
		printBoard();
		if(input == "1") {
			if(getHeight(0) == 6) {
				cout << "You cannot move here. This column is already full.\n";
				cout << "Please try again\n";
				valid = false;
			}
			else {
				plays.push(0);
				setToken(0, 1);
				return true;
			}
		}
		else if(input == "2") {
			if(getHeight(1) == 6) {
				cout << "You cannot move here. This column is already full.\n";
				cout << "Please try again\n";
				valid = false;
			}
			else {
				plays.push(1);
				setToken(1, 1);
				return true;
			}
		}
		else if(input == "3") {
			if(getHeight(2) == 6) {
				cout << "You cannot move here. This column is already full.\n";
				cout << "Please try again\n";
				valid = false;
			}
			else {
				plays.push(2);
				setToken(2, 1);
				return true;
			}
		}
		else if(input == "4") {
			if(getHeight(3) == 6) {
				cout << "You cannot move here. This column is already full.\n";
				cout << "Please try again\n";
				valid = false;
			}
			else {
				plays.push(3);
				setToken(3, 1);
				return true;
			}
		}
		else if(input == "5") {
			if(getHeight(4) == 6) {
				cout << "You cannot move here. This column is already full.\n";
				cout << "Please try again\n";
				valid = false;
			}
			else {
				plays.push(4);
				setToken(4, 1);
				return true;
			}
		}
		else if(input == "6") {
			if(getHeight(5) == 6) {
				cout << "You cannot move here. This column is already full.\n";
				cout << "Please try again\n";
				valid = false;
			}
			else {
				plays.push(5);
				setToken(5, 1);
				return true;
			}
		}
		else if(input == "7") {
			if(getHeight(6) == 6) {
				cout << "You cannot move here. This column is already full.\n";
				cout << "Please try again\n";
				valid = false;
			}
			else {
				plays.push(6);
				setToken(6, 1);
				return true;
			}
		}
		else if(input == "-r") {
			removeLast(2);
			return true;
		}
		else if(input == "-i") {
			if(information()) {
				valid = false;
			}
			else {
				return false;
			}
		}
		else if(input == "-g") {
			if(guide()) {
				valid = false;
			}
			else {
				return false;
			}
		}
		/*else if(input == "-c") {
			if(changeDifficulty()) {
				return;
			}
			else {
				valid = false;
			}
		}*/
		else if(input == "-n") {
			return false;
		}
		else if(input == "-e") {
			continueGame = false;
			return false;
		}
		else {
			cout << "This input is not valid. Try again!\n";
			cout << "Where do you want to place your token (1-7)?";
			valid = false;
		}
		cin >> input;
	}
}	


bool ConnectFour::ask(string s) {
	string input;
	cout << s;
	cin >> input;
	bool valid = false;
			
	while(!valid) {
		if(input == "Y") {
			valid = true;
			return true;
		}
		else if(input == "N") {
			valid = true;
			return false;
		}		
		else {
			valid = false;
			cout << "This is not a valid input. Try again\n";
			cout << s;
			cin >> input;
		}
	}
	return false;
}

void ConnectFour::reset() {
	while(!plays.empty()) {
		plays.pop();
	}
	moves = 0;
	for(int i=0; i<7; i++) {
		for(int j=0; j<7; j++) {
			board[i][j] = 0;
		}
	}
	return;
}

/*int ConnectFour::askLevel() {
	string input;
	bool valid = false;
	
	cout << "Which level computer do you want to play?\n";
	cout << "Easy: choose 1\n";
	cout << "Medium: choose 2\n";
	cout << "Hard: choose 3\n";
	cout << "Choice (1-3): ";
	cin >> input;
		
	while(!valid) {
		if(input == "1") {
			valid = true;
			return 1;
		}
		else if(input ==  "2") {
			valid = true;
			return 2;
		}
		else if(input == "3") {
			valid = true;
			return 3;
		}		
		else {
			valid = false;
			cout << "This is not a valid input. Try again\n";
			cout << "Choice (1-3): ";
			cin >> input;
		}
	}
}*/

/*bool ConnectFour::changeDifficulty() {
	int level = askLevel();
		if(level == 1) {
			//Easy computer;
		}
		else if(level == 2) {
			//Medium computer;
		}
		else {
			//Hard computer;
		}
	return ask();
}*/
/*void ConnectFour::startNew() {
	cout << "StartNEW reached\n";
	reset();
	if(firstMove()) {
		askHuman();
	}
	else {
		int level = askLevel();
		if(level == 1) {
			//Easy computer;
		}
		else if(level == 2) {
			//Medium computer;
		}
		else {
			//Hard computer;
		}
	}
}*/

int ConnectFour::getHeight(int x) {
	int height = 0;
	while(board[height][x] != 0) {
		height++;
	}
	return height;
}	

void ConnectFour::setToken(int x, int token) {
	int y = getHeight(x);
	board[y][x] = token;
	return;
}

void ConnectFour::removeToken(int x) {
	int y = getHeight(x)-1;
	if(y >= 0) {
		board[y][x] = 0;
	}
	else {
		cout << "There is an error\n";
	}
}

void ConnectFour::removeLast(int times) {
	for(int x=0; x<times; x++) {
		if(plays.empty()) {
			cout << "There are no more previous moves\n";
			return;
		}
		else {
			removeToken(plays.top());
			plays.pop();
		}
	}
	return;
}

int ConnectFour::getTopToken(int x) {
	int height = getHeight(x);
	if(height == 0) {
		cout << "There was an error in getTopToken()\n";
	}
	else {
		return board[height-1][x];
	}
}



bool ConnectFour::checkWinner(int token) {
	bool row = checkRow(token);
	bool column = checkColumn(token);
	bool pos = checkPos(token);
	bool neg = checkNeg(token);
	bool win = row || column || pos || neg ? true:false;
	return win;
}

bool ConnectFour::checkRow(int token) {
	int counter = 0;
	for(int y=0; y<7; y++) {
		for(int x=0; x<7; x++) {
			if(board[y][x] == token) {
				counter++;
				if(counter == 4) {
					return true;
				}
				}
				else {
					counter = 0;
			}
		}
		counter = 0;
	}
		return false;
}

bool ConnectFour::checkColumn(int token) {
	int counter = 0;
	for(int x=0; x<7; x++) {
		for(int y=0; y<7; y++) {
			if(board[y][x] == token) {
				counter++;
				if(counter == 4) {
					return true;
				}
				}
				else {
					counter = 0;
				}
			}
			counter = 0;
		}
	return false;
}

bool ConnectFour::checkPos(int token) {
	int counter = 0;
	for(int yStrt=2; yStrt>=0; yStrt--) {
		int y = yStrt;
		int x = 0;
		while(x<7 && y<7) {
			if(board[y][x] == token) {
				counter++;
				if(counter == 4) {
					return true;
				}
				}
				else {
					counter = 0;
				}
				x++;
				y++;
			}
			counter = 0;
		}
		for(int xStrt=1; xStrt<4; xStrt++) {
			int x = xStrt;
			int y = 0;
			while(x<7 && y<7) {
				if(board[y][x] == token) {
					counter++;
					if(counter == 4) {
						return true;
					}
				}
				else {
					counter = 0;
				}
				x++;
				y++;
			}
			counter = 0;
		}
	return false;
}
	
bool ConnectFour::checkNeg(int token) {
	int counter = 0;
	for(int ySet=2; ySet>=0; ySet--) {
		int y = ySet;
		int x = 0;
		while(x>=0 && y<7) {
			if(board[y][x] == token) {
				counter++;
				if(counter == 4) {
					return true;
				}
			}
			else {
				counter = 0;
			}
			x--;
			y++;
		}
		counter = 0;
	}
	counter = 0;
	for(int xSet=5; xSet>2; xSet--) {
		int x = xSet;
		int y = 0;
		while(x<7 && y<7) {
			if(board[y][x] == token) {
				counter++;
				if(counter == 4) {
					return true;
				}
			}
			else {
				counter = 0;
			}
			x--;
			y++;
		}
		counter = 0;
	}
	return false;
}

bool ConnectFour::checkFull() {
	int counter = 0;
	for(int x=0; x<7; x++) {
		if(getHeight(x) == 6) {
			counter++;
		}
	}
	return counter == 7 ? true:false;
}


void ConnectFour::printBoard() {
	string line = "";
	line += "\n  1    2    3    4    5    6    7  ";
	line += "\n-----------------------------------\n";
	for(int y=5; y>=0; y--) {
		for(int x=0; x<7; x++) {
			if(board[y][x] == 1) {
				line += "| X |";
			}
			else if(board[y][x] == -1) {
				line += "| O |";
			}
			else {
				line += "|   |";
			}
		}
	line += "\n-----------------------------------\n";
	}
	line += "  1    2    3    4    5    6    7  \n";
	cout << endl << line << endl;
	return;
}


bool ConnectFour::information() {
	cout << "This is connect 4\n";
	return ask("Would you like to continue this game (Y/N)?");
}
bool ConnectFour::guide() {
	cout << "These are the rules of the game";
	return ask("Would you like to continue this game (Y/N)?");
}

void ConnectFour::computerMove() {
	int* humSolutions = checkSolutions(1);
	int* compSolutions = checkSolutions(-1);
	int combined [7];
	int maxIndex = 0;
	
	cout << "size: " << moves << endl;;
	
	for(int i=0; i<7; i++) {
		combined[i] = compSolutions[i] - humSolutions[i];
		if(canMove(i)) {
			maxIndex = i;
			if(compSolutions[i] > 1000) {
				plays.push(i);
				setToken(i, -1);
				return;
			}
		}
	}
	
	for(int i=0; i<7; i++) {
		if(canMove(i)) {
			
			if((humSolutions[i] > 8*(moves/2)) && (moves != 1)) {
				plays.push(i);
				setToken(i, -1);
				return;
			}
		}
	}
	
	for(int i=0; i<7; i++) {
		cout << "CompSolutions: " << compSolutions[i] << endl;
		cout << "HumSolutions: " << humSolutions[i] << endl;
		cout << "CombinedSolutions: " << combined[i] << endl;
		if(canMove(i)) {
			if(combined[maxIndex] < combined[i]) {
				cout << "THIS IS MAX\n";
				maxIndex = i;
			}
			else if(combined[maxIndex] == combined[i]) {
				if(compSolutions[maxIndex]  < compSolutions[i]) {
					maxIndex = i;
				}
			}
		}
	}
	
	delete [] humSolutions;
	delete [] compSolutions;
	
	plays.push(maxIndex);
	setToken(maxIndex,-1);
	return;
}

int* ConnectFour::checkSolutions(int token) {
	int* solutions = new int[7];
	for(int x=0; x<7; x++) {
		solutions[x] = 0;
		if(canMove(x)) {
			setToken(x, token);
			solutions[x] += checkUpSolutions(token, x);
			solutions[x] += checkSideSolutions(token, x);
			solutions[x] += checkPosSolutions(token, x);
			solutions[x] += checkNegSolutions(token, x);
			removeToken(x);
		}
	}
	return solutions;
}

bool ConnectFour::canMove(int x) {
	if(getHeight(x) == 6) {
		return false;
	}
	return true;
}

int ConnectFour::checkUpSolutions(int token, int x) {
	int y = getHeight(x)-1;
	int tokenCount = 0;
	while((token == board[y][x]) && (y>=0)) {
		tokenCount++;
		y--;
	}
	return weighted(tokenCount);
}
int ConnectFour::checkSideSolutions(int token, int xStart) {
	int y = getHeight(xStart)-1;
	int counter = 0;
	int connectedSpaces = 0;
	int tokenCount = 0;
	int x = xStart;
	int sum = 0;
	while((token != -1*board[y][x]) && (x>=0) && (counter < 4)) { // check
		counter++;
		while((token != -1*board[y][x]) && (x<7) && connectedSpaces<4) {
			connectedSpaces++;
			if(token == board[y][x]) {
				tokenCount++;
			}
			x++;
		}
		if(connectedSpaces == 4) {
			sum += weighted(tokenCount);
		}
		connectedSpaces = 0;
		tokenCount = 0;
		x = xStart - counter; 
	}
	return sum;
}

int ConnectFour::checkPosSolutions(int token, int xStart) {
	int yStart = getHeight(xStart)-1;
	int y = yStart;
	int counter = 0;
	int connectedSpaces = 0;
	int tokenCount = 0;
	int x = xStart;
	int sum = 0;
	while((token != -1*board[y][x]) && (x>=0) && (y>=0) && (counter < 4)) {
		counter++;
		while((token != -1*board[y][x]) && (x<7) && (y<7) && connectedSpaces<4) {
			connectedSpaces++;
			if(token == board[y][x]) {
				tokenCount++;
			}
			x++;
			y++;
		}
		if(connectedSpaces == 4) {
			sum += weighted(tokenCount);
		}
		connectedSpaces = 0;
		tokenCount = 0;
		x = xStart - counter; 
		y = yStart - counter;
	}
	return sum;	
}

int ConnectFour::checkNegSolutions(int token, int xStart) {
	int yStart = getHeight(xStart)-1;
	int y = yStart;
	int counter = 0;
	int connectedSpaces = 0;
	int tokenCount = 0;
	int x = xStart;
	int sum = 0;
	while((token != -1*board[y][x]) && (x>=0) && (y<7) && (counter < 4)) {
		counter++;
		while((token != -1*board[y][x]) && (x<7) && (y>=0) && connectedSpaces<4) {
			connectedSpaces++;
			if(token == board[y][x]) {
				tokenCount++;
			}
			x++;
			y--;
		}
		if(connectedSpaces == 4) {
			sum += weighted(tokenCount);
		}
		connectedSpaces = 0;
		tokenCount = 0;
		x = xStart - counter;
		y = yStart + counter;
	}
	return sum;	
}

int ConnectFour::weighted(int count) {
	switch(count) {
		case 1:
			return 1;
		case 2:
			return 2;
		case 3:
			return 8;
		case 4:
			return 100000;
		default:
			cout << "There was an error\n";
			return 0;
	}
}

int main(){
	int playerin;
	//define ConnectFour class header
	//define tictactoe class header
	//define blackhack class header


	std::cout << "\nḠαмε ℭ℮ηтεя\n"
			  << "\nGreetings player, welcome to the GameCenter! Let the games begin...\n"
			  << "\n";
	while(!quit){
		std::cout << "Please choose which game you would like to play.\n";
		std::cout << "\nEnter 1 for Connect 4..\n"
				  << "Enter 2 for Tic Tac Toe..\n"
				  << "Enter 3 for Blackjack..\n"
				  << "Enter 4 to quit..\n"
				  << "\nEnter your choice now : ";
		std::cin >> playerin;
		std:: cout<< "\n";

		while(cin.fail()){
			std::cin.clear();
			std::cin.ignore();
			std::cout << "Invalid input, please enter an integer from 1 to 3! .. : ";
			std::cin >> playerin;
		}

		if(playerin == 1){
			ConnectFour game(1);
		}
		else if(playerin == 2){
			//initialize tictactoe class
		}
		else if(playerin == 3){
			//initialize blackjack class
		}
		else if(playerin == 4){
			quit = true;
		}

	}

	std::cout << "\nThanks for playing! We hope it was time well spent.\n"
			  << "\n";

}
